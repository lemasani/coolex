// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output          = "../lib/generated/prisma"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Product {
  id             String                 @id @default(uuid())
  title          String
  description    String?
  status         ProductStatus          @default(AVAILABLE)
  price          Float
  category       Category               @relation(fields: [categoryId], references: [id])
  categoryId     String
  location       String?
  contactLink    String // WhatsApp pre-filled link
  images         ProductImage[]
  specifications ProductSpecification[]
  interactions   Interaction[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model Category {
  id                            String                          @id @default(uuid())
  name                          String                          @unique
  products                      Product[]
  CategorySpecificationTemplate CategorySpecificationTemplate[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model CategorySpecificationTemplate {
  id         String   @id @default(uuid())
  key        String // e.g., "CC", "Year", "Material"
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model ProductSpecification {
  id        String  @id @default(uuid())
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Interaction {
  id            String   @id @default(uuid())
  product       Product  @relation(fields: [productId], references: [id])
  productId     String
  customerName  String?
  customerPhone String?
  message       String?
  createdAt     DateTime @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  AVAILABLE
  SOLD_OUT
}
